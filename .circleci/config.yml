defaults: &defaults
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh
      - checkout
      # - run:
      #     name: save-cache-checksum
      #     command: find -name "package.json" | xargs cat >> /tmp/cache-checksum

      # - restore_cache:
      #     keys:
      #       - v1-filemanager-{{ .Branch }}-{{ checksum "/tmp/cache-checksum" }}
      #       - v1-filemanager-{{ .Branch }}
      #       - v1-filemanager-
      # - run:
      #     name: Update npm
      #     command: npm i -g npm@6.2.0

      # - run:
      #     name: Install demo dependencies
      #     command: (cd demo && yarn install)

      - run:
          name: Bootstrap packages
          command: npm i

      - run:
          name: Lint
          command: npm run lint

      # - save_cache:
      #     key: v1-filemanager-{{ .Branch }}-{{ checksum "/tmp/cache-checksum" }}
      #     paths:
      #       - ./yarn.lock
      #       - ./node_modules
      #       - ./packages/connector-node-v1/node_modules
      #       - ./packages/server-nodejs/node_modules
      #       - ./packages/connector-google-drive-v2/node_modules
      #       - ./packages/client-react/node_modules
      #       - ./demo/yarn.lock
      #       - ./demo/node_modules

      - run:
          name: Test REST API
          working_directory: ./packages/server-nodejs
          command: npm run test-restapi

      - store_test_results:
          path: ~/repo/packages/server-nodejs/test-results/junit.xml

      - store_artifacts:
          path: ~/repo/packages/server-nodejs/test-results/junit.xml

  build_release:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh

      - checkout

      # - run:
      #     name: save-cache-checksum
      #     command: find -name "package.json" | xargs cat >> /tmp/cache-checksum

      # - restore_cache:
      #     keys:
      #       - v1-filemanager-{{ .Branch }}-{{ checksum "/tmp/cache-checksum" }}
      #       - v1-filemanager-{{ .Branch }}
      #       - v1-filemanager-

      - run:
          name: Bootstrap packages
          command: npm i

      # - save_cache:
      #     key: v1-filemanager-{{ .Branch }}-{{ checksum "/tmp/cache-checksum" }}
      #     paths:
      #       - ./yarn.lock
      #       - ./node_modules
      #       - ./packages/connector-node-v1/node_modules
      #       - ./packages/server-nodejs/node_modules
      #       - ./packages/connector-google-drive-v2/node_modules
      #       - ./packages/client-react/node_modules
      #       - ./demo/yarn.lock
      #       - ./demo/node_modules

      - run:
          name: Publish to npm
          command: npm run publish

  deploy-demo:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh

      - checkout
      - setup_remote_docker

      # - run:
      #     name: save-cache-checksum
      #     command: find -name "package.json" | xargs cat >> /tmp/cache-checksum

      # - restore_cache:
      #     keys:
      #       - v1-filemanager-{{ .Branch }}-{{ checksum "/tmp/cache-checksum" }}
      #       - v1-filemanager-{{ .Branch }}
      #       - v1-filemanager-

      - run:
          name: Install demo dependencies
          command: (cd demo && npm i)

      - run:
          name: Bootstrap packages
          command: npm i



      - run:
          name: Build client static
          command: |
            cd packages/client-react
            npm run gh-pages:build
            mv ./.gh-pages-tmp ../../demo && mv ../../demo/.gh-pages-tmp ../../demo/static

      - run:
          name: Build server API docs
          command: |
            cd packages/server-nodejs
            npm run build-api-docs
            mkdir -p ../../demo/static/api
            cp -r api-docs.tmp/docs ../../demo/static/api

      - run:
          name: Deploy docker demo image
          command: .circleci/scripts/deploy-docker-image.sh

      - run:
          name: Deploy demo installation
          command: |
            az login -u "${AZURE_USER}" -p "${AZURE_PASS}" &> /tmp/az-login.log
            az aks get-credentials -g ${MINSK_CORE_K8S_AZURE_RG} -n ${MINSK_CORE_K8S_AZURE_NAME}
            helm init --client-only
            .helm/install.sh

workflows:
  version: 2
  commit:
      jobs:
        - build:
            filters:
              branches:
                ignore:
                  - release
        - deploy-demo:
            requires:
              - build
        - release:
            filters:
              branches:
                only: release
        - build_release:
            filters:
              tags:
                only: /.*/
              branches:
                ignore: /.*/
