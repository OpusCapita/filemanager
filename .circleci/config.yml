defaults: &defaults
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name: Inject environment
          command: /bin/env_inject.sh
      - checkout
      - run:
          name: Save cache checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum
      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            # fallback to using the latest cache if no exact match is found
            # - dependencies-
      - run:
          name: Install dependencies
          # we use --unsafe-perm as current build using root user which fails
          command: npm install --unsafe-perm
      - save_cache:
          key: dependencies-{{ checksum "/tmp/cache-checksum" }}
          paths:
            - ./package-lock.json
            - ./node_modules
            - ./packages/client-react/package-lock.json
            - ./packages/client-react/node_modules
            - ./packages/connector-google-drive-v2/package-lock.json
            - ./packages/connector-google-drive-v2/node_modules
            - ./packages/connector-node-v1/package-lock.json
            - ./packages/connector-node-v1/node_modules
            - ./packages/server-nodejs/package-lock.json
            - ./packages/server-nodejs/node_modules
            - ./packages/demoapp/package-lock.json
            - ./packages/demoapp/node_modules
      - run:
          name: Linting sources
          command: npm run lint
      - run:
          name: Run REST API tests
          working_directory: ./packages/server-nodejs
          command: npm run test-restapi
      - store_test_results:
          path: ./packages/server-nodejs/test-results
      - store_artifacts:
          path: ./packages/server-nodejs/test-results

  build_release:
    <<: *defaults
    steps:
      - run:
          name: Inject environment
          command: /bin/env_inject.sh
      - checkout
      - run:
          name: Save cache checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum
      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            # fallback to using the latest cache if no exact match is found
            # - dependencies-
      - run:
          name: Install dependencies
          # we use --unsafe-perm as current build using root user which fails
          command: npm install --unsafe-perm
      - save_cache:
          key: dependencies-{{ checksum "/tmp/cache-checksum" }}
          paths:
            - ./package-lock.json
            - ./node_modules
            - ./packages/client-react/package-lock.json
            - ./packages/client-react/node_modules
            - ./packages/connector-google-drive-v2/package-lock.json
            - ./packages/connector-google-drive-v2/node_modules
            - ./packages/connector-node-v1/package-lock.json
            - ./packages/connector-node-v1/node_modules
            - ./packages/server-nodejs/package-lock.json
            - ./packages/server-nodejs/node_modules
            - ./packages/demoapp/package-lock.json
            - ./packages/demoapp/node_modules
      - run:
          name: Publish to npm
          command: npm run publish

  deploy-demo:
    <<: *defaults
    steps:
      - run:
          name: Inject environment
          command: /bin/env_inject.sh
      - checkout
      - setup_remote_docker
      - run:
          name: Save cache checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum
      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            # fallback to using the latest cache if no exact match is found
            # - dependencies-
      - run:
          name: Install dependencies
          # we use --unsafe-perm as current build using root user which fails
          command: npm install --unsafe-perm
      - save_cache:
          key: dependencies-{{ checksum "/tmp/cache-checksum" }}
          paths:
            - ./package-lock.json
            - ./node_modules
            - ./packages/client-react/package-lock.json
            - ./packages/client-react/node_modules
            - ./packages/connector-google-drive-v2/package-lock.json
            - ./packages/connector-google-drive-v2/node_modules
            - ./packages/connector-node-v1/package-lock.json
            - ./packages/connector-node-v1/node_modules
            - ./packages/server-nodejs/package-lock.json
            - ./packages/server-nodejs/node_modules
            - ./packages/demoapp/package-lock.json
            - ./packages/demoapp/node_modules
      - run:
          name: Build client static files
          command: |
            cd packages/client-react
            npm run gh-pages:build
            rm -rf ../demoapp/static
            mkdir -p ../demoapp/static
            mv .gh-pages-tmp/* ../demoapp/static/
      - run:
          name: Build server API docs
          command: |
            cd packages/server-nodejs
            npm run build-api-docs
            mkdir -p ../demoapp/static/api
            cp -r api-docs.tmp/docs ../demoapp/static/api
      - run:
          name: Generate demo files
          command: |
            mkdir -p packages/demoapp/demoapp/demo-files
            ./demo-filesystem/populate-demo-fs.sh ./packages/demoapp/demo-files
      - run:
          name: Deploy docker demo image
          command: .circleci/scripts/deploy-docker-image.sh
      - run:
          name: Deploy demo installation
          command: |
            az login -u "${AZURE_USER}" -p "${AZURE_PASS}" &> /tmp/az-login.log
            az aks get-credentials -g ${MINSK_CORE_K8S_AZURE_RG} -n ${MINSK_CORE_K8S_AZURE_NAME}
            helm init --client-only
            .helm/install.sh

workflows:
  version: 2
  commit:
      jobs:
        - build:
            filters:
              branches:
                ignore:
                  - release
        # - deploy-demo:
        #     requires:
        #       - build
        - build_release:
            filters:
              tags:
                only: /.*/
              branches:
                ignore: /.*/
